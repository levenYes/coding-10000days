/**
 * 责任链模式
 *
 * "推卸责任"听起来有些贬义的意思，但是有时候也确实存在需要"推卸责任的情况。
 * 例如，当外部请求程序进行某个处理，但程序暂时无法直接决定由哪个对象负责处理时，
 * 就需要推卸责任。这种情况下，我们可以考虑将多个对象组成一条职责链，
 * 然后按照它们在职责链上的顺序一个一个地找出到底应该谁来负责处理。
 *
 * 这种模式被称为Chain of Responsibility模式。
 * Responsibility有"责任"的意思，在汉语中，该模式称为"职责链"。
 * 总之，我们可以将它想象为推卸责任的结构，这有利于大家记住这种模式。
 *
 * 使用Chain of Responsibility模式可以弱化"请求方"和"处理方"之间的关联关系，
 * 让双方各自都成为可独立复用的组件。此外，程序还可以应对其他需求，
 * 如根据情况不同，负责处理的对象也会发生变化的这种需求。
 *
 * 当一个人被要求做什么事情时，如果他可以做就自己做，如果不能做就将"要求"转给另外一个人。
 * 下一个人如果可以自己处理，就自己做；如果也不能自己处理，就再转给另外一个人......
 * 这就是Chain of Responsibility模式。
 */
